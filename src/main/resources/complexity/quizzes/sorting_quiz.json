{
  "category": "Sorting Algorithms",
  "questions": [
    {
      "id": "sort-1",
      "type": "multiple_choice",
      "difficulty": "easy",
      "question": "What is the worst-case time complexity of Bubble Sort?",
      "options": ["O(n)", "O(n log n)", "O(n²)", "O(1)"],
      "correctAnswer": 2,
      "explanation": "Bubble Sort has O(n²) worst-case time complexity because it uses nested loops to compare and swap adjacent elements."
    },
    {
      "id": "sort-2", 
      "type": "multiple_choice",
      "difficulty": "easy",
      "question": "Which sorting algorithm is known for its divide and conquer approach?",
      "options": ["Bubble Sort", "Insertion Sort", "Merge Sort", "Selection Sort"],
      "correctAnswer": 2,
      "explanation": "Merge Sort uses a divide and conquer approach by recursively splitting the array and then merging sorted halves."
    },
    {
      "id": "sort-3",
      "type": "multiple_choice", 
      "difficulty": "medium",
      "question": "What is the space complexity of Merge Sort?",
      "options": ["O(1)", "O(log n)", "O(n)", "O(n²)"],
      "correctAnswer": 2,
      "explanation": "Merge Sort requires O(n) additional space for the temporary arrays used during the merging process."
    },
    {
      "id": "sort-4",
      "type": "multiple_choice",
      "difficulty": "medium", 
      "question": "Which sorting algorithm performs best when the input is already mostly sorted?",
      "options": ["Quick Sort", "Insertion Sort", "Selection Sort", "Heap Sort"],
      "correctAnswer": 1,
      "explanation": "Insertion Sort has O(n) best-case time complexity and performs well on partially sorted data."
    },
    {
      "id": "sort-5",
      "type": "true_false",
      "difficulty": "easy",
      "question": "Quick Sort always has O(n log n) time complexity.",
      "correctAnswer": false,
      "explanation": "Quick Sort has O(n²) worst-case time complexity when the pivot selection is poor (e.g., already sorted array)."
    },
    {
      "id": "sort-6",
      "type": "multiple_choice",
      "difficulty": "hard",
      "question": "Which sorting algorithm is not stable?",
      "options": ["Merge Sort", "Insertion Sort", "Quick Sort", "Bubble Sort"],
      "correctAnswer": 2,
      "explanation": "Quick Sort is not stable because the relative order of equal elements may change during partitioning."
    },
    {
      "id": "sort-7",
      "type": "multiple_choice",
      "difficulty": "medium",
      "question": "What is the time complexity of Heap Sort?",
      "options": ["O(n)", "O(n log n)", "O(n²)", "O(log n)"],
      "correctAnswer": 1,
      "explanation": "Heap Sort has O(n log n) time complexity for building the heap and performing extraction."
    },
    {
      "id": "sort-8",
      "type": "matching",
      "difficulty": "medium",
      "question": "Match the sorting algorithms with their average time complexities:",
      "pairs": [
        {"item": "Bubble Sort", "match": "O(n²)"},
        {"item": "Merge Sort", "match": "O(n log n)"}, 
        {"item": "Quick Sort", "match": "O(n log n)"},
        {"item": "Insertion Sort", "match": "O(n²)"}
      ],
      "explanation": "Bubble and Insertion Sort are O(n²), while Merge and Quick Sort are O(n log n) on average."
    }
  ]
}